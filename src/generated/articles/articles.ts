/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type {
  ArticleIndex,
  GetArticlesParams,
  ArticleShow,
  APIError,
  ArticleCreate,
  GetLatestArticlesParams,
  ArticleUpdate,
  ArticleMe,
  GetUserArticlesParams,
  GetUserPublishedArticlesParams,
  GetUserUnpublishedArticlesParams,
  GetUserAllArticlesParams,
  ArticleVideo,
  GetArticlesWithVideoParams,
} from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve a list of articles.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

By default it will return featured, published articles ordered
by descending popularity.

It supports pagination, each page will contain `30` articles by default.

 * @summary Published articles
 */
export const getArticles = (params?: GetArticlesParams) => {
  return customInstance<ArticleIndex[]>({
    url: `/articles`,
    method: 'get',
    params,
  });
};

export const getGetArticlesKey = (params?: GetArticlesParams) => [
  `/articles`,
  ...(params ? [params] : []),
];

export type GetArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticles>>
>;
export type GetArticlesQueryError = unknown;

export const useGetArticles = <TError = unknown>(
  params?: GetArticlesParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getArticles>>, TError> & {
      swrKey: Key;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetArticlesKey(params));
  const swrFn = () => getArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to create a new article.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

### Rate limiting

There is a limit of 10 requests per 30 seconds.

### Additional resources

- [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)

 * @summary Create a new article
 */
export const createArticle = (articleCreate: ArticleCreate) => {
  return customInstance<ArticleShow>({
    url: `/articles`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: articleCreate,
  });
};

/**
 * This endpoint allows the client to retrieve a list of articles.
ordered by descending publish date.

It supports pagination, each page will contain `30` articles by default.

 * @summary Published articles sorted by publish date
 */
export const getLatestArticles = (params?: GetLatestArticlesParams) => {
  return customInstance<ArticleIndex[]>({
    url: `/articles/latest`,
    method: 'get',
    params,
  });
};

export const getGetLatestArticlesKey = (params?: GetLatestArticlesParams) => [
  `/articles/latest`,
  ...(params ? [params] : []),
];

export type GetLatestArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLatestArticles>>
>;
export type GetLatestArticlesQueryError = unknown;

export const useGetLatestArticles = <TError = unknown>(
  params?: GetLatestArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getLatestArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetLatestArticlesKey(params));
  const swrFn = () => getLatestArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a single
published article given its `id`.

 * @summary A published article by ID
 */
export const getArticleById = (id: number) => {
  return customInstance<ArticleShow>({ url: `/articles/${id}`, method: 'get' });
};

export const getGetArticleByIdKey = (id: number) => [`/articles/${id}`];

export type GetArticleByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticleById>>
>;
export type GetArticleByIdQueryError = APIError;

export const useGetArticleById = <TError = APIError>(
  id: number,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getArticleById>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnable ? getGetArticleByIdKey(id) : null));
  const swrFn = () => getArticleById(id);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to update an existing article.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

### Rate limiting

There is a limit of 30 requests per 30 seconds.

### Additional resources

- [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb)

 * @summary Update an article
 */
export const updateArticle = (id: number, articleUpdate: ArticleUpdate) => {
  return customInstance<ArticleShow>({
    url: `/articles/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: articleUpdate,
  });
};

/**
 * This endpoint allows the client to retrieve a single
published article given its `path`.

 * @summary A published article by path
 */
export const getArticleByPath = (username: string, slug: string) => {
  return customInstance<ArticleShow>({
    url: `/articles/${username}/${slug}`,
    method: 'get',
  });
};

export const getGetArticleByPathKey = (username: string, slug: string) => [
  `/articles/${username}/${slug}`,
];

export type GetArticleByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticleByPath>>
>;
export type GetArticleByPathQueryError = APIError;

export const useGetArticleByPath = <TError = APIError>(
  username: string,
  slug: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getArticleByPath>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!(username && slug);
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnable ? getGetArticleByPathKey(username, slug) : null));
  const swrFn = () => getArticleByPath(username, slug);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of published articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Published articles will be in reverse chronological publication order.

It will return published articles with pagination.
By default a page will contain `30` articles.

 * @summary User's articles
 */
export const getUserArticles = (params?: GetUserArticlesParams) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me`,
    method: 'get',
    params,
  });
};

export const getGetUserArticlesKey = (params?: GetUserArticlesParams) => [
  `/articles/me`,
  ...(params ? [params] : []),
];

export type GetUserArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserArticles>>
>;
export type GetUserArticlesQueryError = APIError;

export const useGetUserArticles = <TError = APIError>(
  params?: GetUserArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetUserArticlesKey(params));
  const swrFn = () => getUserArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of published articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Published articles will be in reverse chronological publication order.

It will return published articles with pagination.
By default a page will contain `30` articles.

 * @summary User's published articles
 */
export const getUserPublishedArticles = (
  params?: GetUserPublishedArticlesParams
) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/published`,
    method: 'get',
    params,
  });
};

export const getGetUserPublishedArticlesKey = (
  params?: GetUserPublishedArticlesParams
) => [`/articles/me/published`, ...(params ? [params] : [])];

export type GetUserPublishedArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserPublishedArticles>>
>;
export type GetUserPublishedArticlesQueryError = APIError;

export const useGetUserPublishedArticles = <TError = APIError>(
  params?: GetUserPublishedArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserPublishedArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetUserPublishedArticlesKey(params));
  const swrFn = () => getUserPublishedArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of unpublished articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Unpublished articles will be in reverse chronological creation order.

It will return unpublished articles with pagination.
By default a page will contain `30` articles.

 * @summary User's unpublished articles
 */
export const getUserUnpublishedArticles = (
  params?: GetUserUnpublishedArticlesParams
) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/unpublished`,
    method: 'get',
    params,
  });
};

export const getGetUserUnpublishedArticlesKey = (
  params?: GetUserUnpublishedArticlesParams
) => [`/articles/me/unpublished`, ...(params ? [params] : [])];

export type GetUserUnpublishedArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserUnpublishedArticles>>
>;
export type GetUserUnpublishedArticlesQueryError = APIError;

export const useGetUserUnpublishedArticles = <TError = APIError>(
  params?: GetUserUnpublishedArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserUnpublishedArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetUserUnpublishedArticlesKey(params));
  const swrFn = () => getUserUnpublishedArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of all articles on
behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

It will return both published and unpublished articles with pagination.

Unpublished articles will be at the top of the list in reverse chronological creation order.
Published articles will follow in reverse chronological publication order.

By default a page will contain `30` articles.

 * @summary User's all articles
 */
export const getUserAllArticles = (params?: GetUserAllArticlesParams) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/all`,
    method: 'get',
    params,
  });
};

export const getGetUserAllArticlesKey = (params?: GetUserAllArticlesParams) => [
  `/articles/me/all`,
  ...(params ? [params] : []),
];

export type GetUserAllArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserAllArticles>>
>;
export type GetUserAllArticlesQueryError = APIError;

export const useGetUserAllArticles = <TError = APIError>(
  params?: GetUserAllArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserAllArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetUserAllArticlesKey(params));
  const swrFn = () => getUserAllArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of articles
that are uploaded with a video.

It will only return published video articles
ordered by descending popularity.

It supports pagination, each page will contain `24` articles by default.

 * @summary Articles with a video
 */
export const getArticlesWithVideo = (params?: GetArticlesWithVideoParams) => {
  return customInstance<ArticleVideo[]>({
    url: `/videos`,
    method: 'get',
    params,
  });
};

export const getGetArticlesWithVideoKey = (
  params?: GetArticlesWithVideoParams
) => [`/videos`, ...(params ? [params] : [])];

export type GetArticlesWithVideoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticlesWithVideo>>
>;
export type GetArticlesWithVideoQueryError = unknown;

export const useGetArticlesWithVideo = <TError = unknown>(
  params?: GetArticlesWithVideoParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getArticlesWithVideo>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetArticlesWithVideoKey(params));
  const swrFn = () => getArticlesWithVideo(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
