/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type {
  ArticleMe,
  APIError,
  GetUserArticlesParams,
  GetUserPublishedArticlesParams,
  GetUserUnpublishedArticlesParams,
  GetUserAllArticlesParams,
  User,
  GetUserParams,
  AdminUserCreate,
} from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve a list of published articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Published articles will be in reverse chronological publication order.

It will return published articles with pagination.
By default a page will contain `30` articles.

 * @summary User's articles
 */
export const getUserArticles = (params?: GetUserArticlesParams) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me`,
    method: 'get',
    params,
  });
};

export const getGetUserArticlesKey = (params?: GetUserArticlesParams) => [
  `/articles/me`,
  ...(params ? [params] : []),
];

export type GetUserArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserArticles>>
>;
export type GetUserArticlesQueryError = APIError;

export const useGetUserArticles = <TError = APIError>(
  params?: GetUserArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetUserArticlesKey(params));
  const swrFn = () => getUserArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of published articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Published articles will be in reverse chronological publication order.

It will return published articles with pagination.
By default a page will contain `30` articles.

 * @summary User's published articles
 */
export const getUserPublishedArticles = (
  params?: GetUserPublishedArticlesParams
) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/published`,
    method: 'get',
    params,
  });
};

export const getGetUserPublishedArticlesKey = (
  params?: GetUserPublishedArticlesParams
) => [`/articles/me/published`, ...(params ? [params] : [])];

export type GetUserPublishedArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserPublishedArticles>>
>;
export type GetUserPublishedArticlesQueryError = APIError;

export const useGetUserPublishedArticles = <TError = APIError>(
  params?: GetUserPublishedArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserPublishedArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetUserPublishedArticlesKey(params));
  const swrFn = () => getUserPublishedArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of unpublished articles
on behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

Unpublished articles will be in reverse chronological creation order.

It will return unpublished articles with pagination.
By default a page will contain `30` articles.

 * @summary User's unpublished articles
 */
export const getUserUnpublishedArticles = (
  params?: GetUserUnpublishedArticlesParams
) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/unpublished`,
    method: 'get',
    params,
  });
};

export const getGetUserUnpublishedArticlesKey = (
  params?: GetUserUnpublishedArticlesParams
) => [`/articles/me/unpublished`, ...(params ? [params] : [])];

export type GetUserUnpublishedArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserUnpublishedArticles>>
>;
export type GetUserUnpublishedArticlesQueryError = APIError;

export const useGetUserUnpublishedArticles = <TError = APIError>(
  params?: GetUserUnpublishedArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserUnpublishedArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetUserUnpublishedArticlesKey(params));
  const swrFn = () => getUserUnpublishedArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of all articles on
behalf of an authenticated user.

"Articles" are all the posts that users create on DEV that typically
show up in the feed. They can be a blog post, a discussion question,
a help thread etc. but is referred to as article within the code.

It will return both published and unpublished articles with pagination.

Unpublished articles will be at the top of the list in reverse chronological creation order.
Published articles will follow in reverse chronological publication order.

By default a page will contain `30` articles.

 * @summary User's all articles
 */
export const getUserAllArticles = (params?: GetUserAllArticlesParams) => {
  return customInstance<ArticleMe[]>({
    url: `/articles/me/all`,
    method: 'get',
    params,
  });
};

export const getGetUserAllArticlesKey = (params?: GetUserAllArticlesParams) => [
  `/articles/me/all`,
  ...(params ? [params] : []),
];

export type GetUserAllArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserAllArticles>>
>;
export type GetUserAllArticlesQueryError = APIError;

export const useGetUserAllArticles = <TError = APIError>(
  params?: GetUserAllArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserAllArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetUserAllArticlesKey(params));
  const swrFn = () => getUserAllArticles(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a single user, either by
id or by the user's username

 * @summary A user
 */
export const getUser = (id: string, params?: GetUserParams) => {
  return customInstance<User>({ url: `/users/${id}`, method: 'get', params });
};

export const getGetUserKey = (id: string, params?: GetUserParams) => [
  `/users/${id}`,
  ...(params ? [params] : []),
];

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = APIError;

export const useGetUser = <TError = APIError>(
  id: string,
  params?: GetUserParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUser>>, TError> & {
      swrKey: Key;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnable ? getGetUserKey(id, params) : null));
  const swrFn = () => getUser(id, params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve information
about the authenticated user

 * @summary The authenticated user
 */
export const getUserMe = () => {
  return customInstance<User>({ url: `/users/me`, method: 'get' });
};

export const getGetUserMeKey = () => [`/users/me`];

export type GetUserMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserMe>>
>;
export type GetUserMeQueryError = APIError;

export const useGetUserMe = <TError = APIError>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserMe>>, TError> & {
    swrKey: Key;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetUserMeKey());
  const swrFn = () => getUserMe();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to trigger an invitation to the
provided email address.

It requires a token from a user with `super-admin` privileges.

 * @summary Invites a user to the Forem instannce
 */
export const postAdminUsersCreate = (adminUserCreate: AdminUserCreate) => {
  return customInstance<void>({
    url: `/admin/users`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: adminUserCreate,
  });
};
