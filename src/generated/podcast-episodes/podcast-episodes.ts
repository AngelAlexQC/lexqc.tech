/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type {
  PodcastEpisode,
  APIError,
  GetPodcastEpisodesParams,
} from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve a list of podcast episodes.

"Podcast episodes" are episodes belonging to podcasts.

It will only return active podcast episodes that belong to published
podcasts available on the platform,
ordered by descending publication date.

It supports pagination, each page will contain `30` articles by default.

 * @summary Published podcast episodes
 */
export const getPodcastEpisodes = (params?: GetPodcastEpisodesParams) => {
  return customInstance<PodcastEpisode[]>({
    url: `/podcast_episodes`,
    method: 'get',
    params,
  });
};

export const getGetPodcastEpisodesKey = (params?: GetPodcastEpisodesParams) => [
  `/podcast_episodes`,
  ...(params ? [params] : []),
];

export type GetPodcastEpisodesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPodcastEpisodes>>
>;
export type GetPodcastEpisodesQueryError = APIError;

export const useGetPodcastEpisodes = <TError = APIError>(
  params?: GetPodcastEpisodesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getPodcastEpisodes>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetPodcastEpisodesKey(params));
  const swrFn = () => getPodcastEpisodes(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
