/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type {
  Comment,
  APIError,
  GetCommentsByArticleIdParams,
} from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve all comments belonging to an
article or podcast episode as threaded conversations.

It will return the all top level comments with their nested comments as
threads. See the format specification for further details.

 * @summary Comments
 */
export const getCommentsByArticleId = (
  params?: GetCommentsByArticleIdParams
) => {
  return customInstance<Comment[]>({ url: `/comments`, method: 'get', params });
};

export const getGetCommentsByArticleIdKey = (
  params?: GetCommentsByArticleIdParams
) => [`/comments`, ...(params ? [params] : [])];

export type GetCommentsByArticleIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByArticleId>>
>;
export type GetCommentsByArticleIdQueryError = APIError;

export const useGetCommentsByArticleId = <TError = APIError>(
  params?: GetCommentsByArticleIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCommentsByArticleId>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? (() => getGetCommentsByArticleIdKey(params));
  const swrFn = () => getCommentsByArticleId(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a comment as well as his
descendants comments.

It will return the required comment (the root) with its nested
descendants as a thread.

See the format specification for further details.

 * @summary Comment
 */
export const getCommentById = (id: string) => {
  return customInstance<Comment>({ url: `/comments/${id}`, method: 'get' });
};

export const getGetCommentByIdKey = (id: string) => [`/comments/${id}`];

export type GetCommentByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentById>>
>;
export type GetCommentByIdQueryError = APIError;

export const useGetCommentById = <TError = APIError>(
  id: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCommentById>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnable ? getGetCommentByIdKey(id) : null));
  const swrFn = () => getCommentById(id);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
