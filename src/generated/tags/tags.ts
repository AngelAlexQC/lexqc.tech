/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type { FollowedTag, APIError, Tag, GetTagsParams } from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve a list of the tags
they follow.

 * @summary Followed tags
 */
export const getFollowedTags = () => {
  return customInstance<FollowedTag[]>({ url: `/follows/tags`, method: 'get' });
};

export const getGetFollowedTagsKey = () => [`/follows/tags`];

export type GetFollowedTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFollowedTags>>
>;
export type GetFollowedTagsQueryError = APIError;

export const useGetFollowedTags = <TError = APIError>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getFollowedTags>>,
    TError
  > & { swrKey: Key };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetFollowedTagsKey());
  const swrFn = () => getFollowedTags();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of tags
that can be used to tag articles.

It will return tags ordered by popularity.

It supports pagination, each page will contain `10` tags by default.

 * @summary Tags
 */
export const getTags = (params?: GetTagsParams) => {
  return customInstance<Tag[]>({ url: `/tags`, method: 'get', params });
};

export const getGetTagsKey = (params?: GetTagsParams) => [
  `/tags`,
  ...(params ? [params] : []),
];

export type GetTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTags>>
>;
export type GetTagsQueryError = unknown;

export const useGetTags = <TError = unknown>(
  params?: GetTagsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getTags>>, TError> & {
      swrKey: Key;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? (() => getGetTagsKey(params));
  const swrFn = () => getTags(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
