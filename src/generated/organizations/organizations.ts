/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DEV API (beta)
 * 
Access Forem articles, users and other resources via API.

For a real-world example of Forem in action, check out [DEV](https://www.dev.to).

All endpoints that don't require authentication are CORS enabled.

All requests must send a user-agent header.

Dates and date times, unless otherwise specified, must be in
the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

 * OpenAPI spec version: 0.9.7
 */
import useSwr, { SWRConfiguration, Key } from 'swr';
import type {
  Organization,
  APIError,
  User,
  GetOrgUsersParams,
  GetOrgListings200Item,
  GetOrgListingsParams,
  ArticleIndex,
  GetOrgArticlesParams,
} from '.././models';
import { customInstance } from '../../orval/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * This endpoint allows the client to retrieve a single organization by their username

 * @summary An organization
 */
export const getOrganization = (username: string) => {
  return customInstance<Organization>({
    url: `/organizations/${username}`,
    method: 'get',
  });
};

export const getGetOrganizationKey = (username: string) => [
  `/organizations/${username}`,
];

export type GetOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganization>>
>;
export type GetOrganizationQueryError = APIError;

export const useGetOrganization = <TError = APIError>(
  username: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOrganization>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!username;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnable ? getGetOrganizationKey(username) : null));
  const swrFn = () => getOrganization(username);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of users belonging to the organization

It supports pagination, each page will contain `30` users by default.

 * @summary Organization's users
 */
export const getOrgUsers = (username: string, params?: GetOrgUsersParams) => {
  return customInstance<User[]>({
    url: `/organizations/${username}/users`,
    method: 'get',
    params,
  });
};

export const getGetOrgUsersKey = (
  username: string,
  params?: GetOrgUsersParams
) => [`/organizations/${username}/users`, ...(params ? [params] : [])];

export type GetOrgUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrgUsers>>
>;
export type GetOrgUsersQueryError = APIError;

export const useGetOrgUsers = <TError = APIError>(
  username: string,
  params?: GetOrgUsersParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrgUsers>>, TError> & {
      swrKey: Key;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!username;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnable ? getGetOrgUsersKey(username, params) : null));
  const swrFn = () => getOrgUsers(username, params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of listings belonging to the organization

It supports pagination, each page will contain `30` listing by default.

 * @summary Organization's listings
 */
export const getOrgListings = (
  username: string,
  params?: GetOrgListingsParams
) => {
  return customInstance<GetOrgListings200Item[]>({
    url: `/organizations/${username}/listings`,
    method: 'get',
    params,
  });
};

export const getGetOrgListingsKey = (
  username: string,
  params?: GetOrgListingsParams
) => [`/organizations/${username}/listings`, ...(params ? [params] : [])];

export type GetOrgListingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrgListings>>
>;
export type GetOrgListingsQueryError = APIError;

export const useGetOrgListings = <TError = APIError>(
  username: string,
  params?: GetOrgListingsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOrgListings>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!username;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnable ? getGetOrgListingsKey(username, params) : null));
  const swrFn = () => getOrgListings(username, params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * This endpoint allows the client to retrieve a list of Articles belonging to the organization

It supports pagination, each page will contain `30` articles by default.

 * @summary Organization's Articles
 */
export const getOrgArticles = (
  username: string,
  params?: GetOrgArticlesParams
) => {
  return customInstance<ArticleIndex[]>({
    url: `/organizations/${username}/articles`,
    method: 'get',
    params,
  });
};

export const getGetOrgArticlesKey = (
  username: string,
  params?: GetOrgArticlesParams
) => [`/organizations/${username}/articles`, ...(params ? [params] : [])];

export type GetOrgArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrgArticles>>
>;
export type GetOrgArticlesQueryError = APIError;

export const useGetOrgArticles = <TError = APIError>(
  username: string,
  params?: GetOrgArticlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOrgArticles>>,
      TError
    > & { swrKey: Key };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnable = !!username;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnable ? getGetOrgArticlesKey(username, params) : null));
  const swrFn = () => getOrgArticles(username, params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
